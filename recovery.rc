on early-init
    start ueventd
    start healthd

on init
    export PATH /sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

    symlink /system/etc /etc

    mkdir /boot
    mkdir /recovery
    mkdir /sdcard
    mkdir /internal_sd
    mkdir /external_sd
    mkdir /sd-ext
    mkdir /datadata
    mkdir /emmc
    mkdir /system
    mkdir /data
    mkdir /data/property
    mkdir /cache
    mount tmpfs tmpfs /tmp

    chown root root /data/property
    chmod 0700 /data/property

    chown root shell /tmp
    chmod 0775 /tmp

    mkdir /mnt 0775 root system
    mkdir /storage 0050 root sdcard_r
    mount tmpfs tmpfs /storage mode=0050,uid=0,gid=1028

    # See storage config details at http://source.android.com/tech/storage/
    mkdir /mnt/shell 0700 shell shell

    write /proc/sys/vm/legacy_va_layout 0
    write /proc/sys/kernel/randomize_va_space 2

    # Directory for putting things only root should see.
    mkdir /mnt/secure 0700 root root

    # Create private mountpoint so we can MS_MOVE from staging
    mount tmpfs tmpfs /mnt/secure mode=0700,uid=0,gid=0

    # Directory for staging bindmounts
    mkdir /mnt/secure/staging 0700 root root

    # Fuse public mount points.
    mkdir /mnt/fuse 0700 root system
    mount tmpfs tmpfs /mnt/fuse mode=0775,gid=1000

on post-fs-data
# insmod kernel modules
    insmod /lib/modules/exfat.ko

on fs
    # check encryption status, checking UMS & data should be excuted after this command 
    exec check_encryption_status /dev/block/mmcblk0p10

    # verfiy filesystem (UMS)
    exec sformat /dev/block/mmcblk0p11 vfat

on boot
    mount debugfs /sys/kernel/debug /sys/kernel/debug

    setprop ro.build.product GT-I9100
    setprop ro.product.device GT-I9100

# Permissions for mDNIe
    chown system media_rw /sys/class/mdnie/mdnie/mode
    chown system media_rw /sys/class/mdnie/mdnie/outdoor
    chown system media_rw /sys/class/mdnie/mdnie/scenario
    write /sys/class/mdnie/mdnie/scenario 0
    write /sys/class/mdnie/mdnie/mode 1

    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

on property:sys.powerctl=*
    powerctl ${sys.powerctl}

service ueventd /sbin/ueventd
    critical

service healthd /sbin/healthd -n
    critical

service console /sbin/sh
    class core
    console
    disabled
    group log

on property:ro.debuggable=1
    start console

service recovery /sbin/recovery-loader

service setup_adbd /sbin/setup_adbd
    oneshot

service adbd /sbin/adbd recovery
    disabled
    socket adbd stream 660 system system

service vold /sbin/minivold
    socket vold stream 0660 root mount
    ioprio be 2

# Always start adbd on userdebug and eng builds
# In recovery, always run adbd as root.
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 04e8
    write /sys/class/android_usb/android0/idProduct 685e
    write /sys/class/android_usb/android0/functions mass_storage,adb
    write /sys/class/android_usb/android0/enable 1
    write /sys/class/android_usb/android0/iManufacturer Samsung
    write /sys/class/android_usb/android0/iProduct GT-I9100
    start adbd
    setprop service.adb.root 1

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    write /sys/class/android_usb/android0/enable 1
